generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int        @id @default(autoincrement())
  name      String
  email     String     @unique
  password  String
  google_id String?    // Nullable
  createdAt DateTime   @default(now())  
  role      UserRole[]
  @@map("users")
}

model Categories {
  id          Int       @id @default(autoincrement())
  name        String
  description String
  courses Courses[]
  createdAt   DateTime  @default(now()) // Gunakan @default untuk createdAt
  updatedAt   DateTime? @updatedAt       // Gunakan @updatedAt untuk updatedAt
  @@map("categories")
}

model Courses {
  id          Int         @id @default(autoincrement())
  title       String
  description String
  status      CourseStatus @default(draft)
  price       Decimal     @db.Decimal(10, 2) @default(0)
  duration    Int
  category_id Int
  category    Categories   @relation(fields: [category_id], references: [id])
  createdAt   DateTime    @default(now())  // Gunakan @default untuk createdAt
  updatedAt   DateTime?   @updatedAt       // Gunakan @updatedAt untuk updatedAt
  @@map("courses")
}

model Roles {
  id          Int         @id @default(autoincrement())
  name        String
  description String
  role        UserRole[]
  @@map("roles")
}

model UserRole {
  user   User   @relation(fields: [user_id], references: [id])
  user_id Int
  role   Roles  @relation(fields: [role_id], references: [id])
  role_id Int

  @@id([user_id, role_id])
  @@map("user_roles")
}

// model CourseCategories {
//   courseId   Int        // Referensi ke course
//   categoryId Int        // Referensi ke category
//   course     Courses    @relation(fields: [courseId], references: [id])
//   category   Categories @relation(fields: [categoryId], references: [id])

//   @@id([courseId, categoryId]) // Kombinasi primary key
//   @@map("course_category")
// }

enum CourseStatus {
  draft
  publish
}
