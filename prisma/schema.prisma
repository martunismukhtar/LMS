generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String           @id @default(uuid())
  name          String
  email         String           @unique
  password      String
  google_id     String? // Nullable
  createdAt     DateTime         @default(now())
  role          UserRole[]
  subscriptions Subscriptions[]
  progress      LessonProgress[]
  usercourse UserCourse[]
  cart Cart[]
  @@map("users")
}

model Categories {
  id            String          @id @default(uuid())
  name        String
  description String
  courses     Courses[]
  createdAt   DateTime  @default(now()) // Gunakan @default untuk createdAt
  updatedAt   DateTime? @updatedAt // Gunakan @updatedAt untuk updatedAt

  @@map("categories")
}

model Courses {
  id            String          @id @default(uuid())
  title         String
  description   String
  status        CourseStatus    @default(draft)
  price         Decimal         @default(0) @db.Decimal(10, 2)
  duration      Int
  category_id   String
  category      Categories      @relation(fields: [category_id], references: [id])
  module        Modules[]
  subscriptions Subscriptions[]
  usercourse UserCourse[]
  CartItem CartItem[]
  createdAt     DateTime        @default(now()) // Gunakan @default untuk createdAt
  updatedAt     DateTime?       @updatedAt // Gunakan @updatedAt untuk updatedAt

  @@map("courses")
}

model UserCourse {
  id String @id @default(uuid())
  course_id String
  course    Courses   @relation(fields: [course_id], references: [id])
  user_id String
  user User  @relation(fields: [user_id], references: [id])
  @@map("user_course")
}

model Modules {
  id        String    @id @default(uuid())
  title     String
  course_id String
  course    Courses   @relation(fields: [course_id], references: [id])
  lesson    Lessons[]

  @@map("modules")
}

model Lessons {
  id           String           @id @default(uuid())
  module_id    String
  module       Modules          @relation(fields: [module_id], references: [id])
  title        String
  description  String?
  content      String?          @db.Text
  video_url    String?
  duration     Int              @default(0)
  is_published Boolean          @default(false)
  is_free      Boolean          @default(true)
  progress     LessonProgress[]
  created_at   DateTime         @default(dbgenerated("CURRENT_TIMESTAMP"))
  updated_at   DateTime?        @updatedAt

  @@map("lessons")
}

model Subscriptions {
  id                String         @id @default(cuid())
  user_id           String
  user              User           @relation(fields: [user_id], references: [id])
  course_id         String
  course            Courses        @relation(fields: [course_id], references: [id])
  subscription_type CourseDuration
  start_date        DateTime
  validUntil        DateTime
  createdAt         DateTime       @default(now())

  @@map("subscriptions")
}

model LessonProgress {
  id          String    @id @default(cuid())
  user_id     String
  user        User      @relation(fields: [user_id], references: [id])
  lesson_id   String
  lesson      Lessons   @relation(fields: [lesson_id], references: [id])
  completed   Boolean   @default(false)
  completed_at DateTime?
  createdAt   DateTime  @default(now())

  @@map("lesson_progress")
}

model Roles {
  id          Int        @id @default(autoincrement())
  name        String
  description String
  role        UserRole[]

  @@map("roles")
}

model UserRole {
  id          String    @id @default(cuid())
  user    User   @relation(fields: [user_id], references: [id])
  user_id String
  role    Roles  @relation(fields: [role_id], references: [id])
  role_id Int

  @@map("user_roles")
}

model Cart {
  id          String    @id @default(cuid())
  status CartStatus @default(ACTIVE)
  user_id String
  user User @relation(fields: [user_id], references: [id])
  cartitem CartItem[]
  created_at   DateTime         @default(dbgenerated("CURRENT_TIMESTAMP"))
  updated_at   DateTime?        @updatedAt

  @@map("cart")
}

model CartItem {
  id          String    @id @default(cuid())
  cart_id String
  cart Cart @relation(fields: [cart_id], references: [id])
  course_id String
  course Courses @relation(fields: [course_id], references: [id])
  quantity Int @default(1)
  price         Decimal         @default(0) @db.Decimal(10, 2)
  created_at   DateTime         @default(dbgenerated("CURRENT_TIMESTAMP"))
  updated_at   DateTime?        @updatedAt

  @@map("cart_item")
}

enum CartStatus {
  ACTIVE
  COMPLETED
  PENDING
  ABANDONED
  CANCELED
}

enum CourseStatus {
  draft
  publish
}

enum CourseDuration {
  ONE_MONTH
  THREE_MONTHS
  SIX_MONTHS
  TWELVE_MONTHS
  LIFETIME
}
